// ==========================================================================
// Color System
// ==========================================================================

@use 'sass:color';
@use 'sass:map';

// Core color definitions
$base-colors: (
  // Core colors
  'primary': #5e42a6,
  'secondary': #b74e91,
  'accent': #00ffcc,
  'accent-alt': #e2c221,

  // Base colors
  'background': #312450,
  'text': #ffffff
);

// Generate color map with variants
$colors: ();

@each $name, $color in $base-colors {
  // Base color
  $colors: map.set($colors, $name, $color);

  // Light/dark variants
  $colors: map.set($colors, '#{$name}-light', color.scale($color, $lightness: 20%));
  $colors: map.set($colors, '#{$name}-dark', color.scale($color, $lightness: -20%));
}

// Add semantic color aliases
$colors: map.merge(
  $colors,
  (
    'link': map.get($colors, 'accent'),
    'link-hover': color.scale(map.get($colors, 'accent'), $lightness: 15%),
    'border': color.change(map.get($colors, 'text'), $alpha: 0.5),
    'input-bg': color.scale(map.get($colors, 'background'), $lightness: 15%),
    'header-bg': color.scale(map.get($colors, 'background'), $lightness: 15%),
    'shadow': color.change(map.get($colors, 'background-dark'), $alpha: 0.1),
  )
);

// Color functions
// ==========================================================================

/// Get a color value
/// @param {String} $key - Key of the color
/// @return {Color} The color value
@function color($key) {
  @if map.has-key($colors, $key) {
    @return map.get($colors, $key);
  }

  @error "Color `#{$key}` not found in $colors map.";
  @return null;
}

/// Lighten a color
/// @param {String} $key - Key of the color
/// @param {Number} $amount - Amount to lighten by
/// @return {Color} Lightened color
@function lighten($key, $amount) {
  @return color.scale(color($key), $lightness: $amount);
}

/// Darken a color
/// @param {String} $key - Key of the color
/// @param {Number} $amount - Amount to darken by
/// @return {Color} Darkened color
@function darken($key, $amount) {
  @return color.scale(color($key), $lightness: -$amount);
}

/// Adjust color opacity
/// @param {String} $key - Key of the color
/// @param {Number} $amount - Opacity value (0-1)
/// @return {Color} Color with adjusted opacity
@function alpha($key, $amount) {
  @return color.change(color($key), $alpha: $amount);
}
