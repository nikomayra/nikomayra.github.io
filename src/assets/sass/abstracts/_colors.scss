// ==========================================================================
// Color System
// ==========================================================================

@use 'sass:color';
@use 'sass:map';

// Core color definitions
$base-colors: (
  'primary': #3e2a37,
  'primary-light': #684b63,
  'primary-dark': #1d0e1a,
  'secondary': #7c4694,
  'secondary-light': #9a68b2,
  'secondary-dark': #51256e,
  'accent': #b1d298,
  'accent-light': #cae4bf,
  'accent-dark': #7aae70,
  'accent-alt': #f9e67b,
  'accent-alt-light': #debc4c,
  'accent-alt-dark': #b1973d,
  'background': #1d0e1a,
  'background-light': #3e2a37,
  'background-dark': #18233c,
  'text': #f9fcee,
  'text-light': #ffffff,
  'text-dark': #e4c4ed,
);

// Generate color map with variants
$colors: ();

@each $name, $color in $base-colors {
  // Base color
  $colors: map.set($colors, $name, $color);

  // Add light/dark variants if not already defined
  @if not map.has-key($base-colors, '#{$name}-light') {
    $colors: map.set($colors, '#{$name}-light', color.scale($color, $lightness: 20%));
  }
  
  @if not map.has-key($base-colors, '#{$name}-dark') {
    $colors: map.set($colors, '#{$name}-dark', color.scale($color, $lightness: -20%));
  }
}

// Add semantic color aliases
$colors: map.merge(
  $colors,
  (
    'link': map.get($colors, 'accent'),
    'link-hover': color.scale(map.get($colors, 'accent'), $lightness: 15%),
    'border': color.change(map.get($colors, 'text'), $alpha: 0.5),
    'input-bg': color.scale(map.get($colors, 'background'), $lightness: 15%),
    'header-bg': color.scale(map.get($colors, 'background'), $lightness: 15%),
    'shadow': color.change(map.get($colors, 'background-dark'), $alpha: 0.5),
  )
);

// Color functions
// ==========================================================================

/// Get a color value
/// @param {String} $key - Key of the color
/// @return {Color} The color value
@function color($key) {
  @if map.has-key($colors, $key) {
    @return map.get($colors, $key);
  }

  @error "Color `#{$key}` not found in $colors map.";
  @return null;
}

/// Lighten a color
/// @param {String} $key - Key of the color
/// @param {Number} $amount - Amount to lighten by
/// @return {Color} Lightened color
@function lighten($key, $amount) {
  @return color.scale(color($key), $lightness: $amount);
}

/// Darken a color
/// @param {String} $key - Key of the color
/// @param {Number} $amount - Amount to darken by
/// @return {Color} Darkened color
@function darken($key, $amount) {
  @return color.scale(color($key), $lightness: -$amount);
}

/// Adjust color opacity
/// @param {String} $key - Key of the color
/// @param {Number} $amount - Opacity value (0-1)
/// @return {Color} Color with adjusted opacity
@function alpha($key, $amount) {
  @return color.change(color($key), $alpha: $amount);
}

/// Mix two colors
/// @param {String} $key1 - First color key
/// @param {String} $key2 - Second color key
/// @param {Number} $weight - Weight of the first color (0-100)
/// @return {Color} Mixed color
@function mix-colors($key1, $key2, $weight: 50%) {
  @return color.mix(color($key1), color($key2), $weight);
}

/// Create a linear gradient
/// @param {String} $direction - Direction of the gradient
/// @param {String} $key1 - First color key
/// @param {String} $key2 - Second color key
/// @return {String} Gradient CSS value
@function gradient($direction, $key1, $key2) {
  @return linear-gradient($direction, color($key1), color($key2));
}

/// Create a radial gradient
/// @param {String} $shape - Shape of the gradient
/// @param {String} $key1 - First color key
/// @param {String} $key2 - Second color key
/// @return {String} Gradient CSS value
@function radial-gradient($shape, $key1, $key2) {
  @return radial-gradient($shape, color($key1), color($key2));
}
