// ==========================================================================
// Mixins Library
// ==========================================================================
//
// This file contains all the mixins used throughout the application.
// Mixins are organized by type (layout, typography, etc.)
// Each mixin is documented with its purpose and parameters.

@use 'sass:list';
@use 'sass:math';
@use 'functions' as fn;
@use 'breakpoints' as bp;
@use '../vendor/vendor';

// ==========================================================================
// Visual Mixins
// ==========================================================================

/// Hide an element visually while keeping it accessible to screen readers
/// @description Creates a visually hidden element that remains accessible to assistive technologies
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// ==========================================================================
// Layout Mixins
// ==========================================================================

/// Flexbox layout
/// @description Sets up a flex container with common alignment properties
/// @param {string} $direction [row] - Flex direction (row, column, row-reverse, column-reverse)
/// @param {string} $justify [flex-start] - Justify content alignment
/// @param {string} $align [stretch] - Align items alignment
/// @param {string} $wrap [nowrap] - Flex wrap behavior
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

/// Grid System
/// @param {number} $gutters [1.5em] - Grid gutters size
/// @param {string} $suffix [''] - Breakpoint suffix (xlarge, large, medium, small, xsmall)
@mixin grid($gutters: 1.5em, $suffix: '') {
  // Row styles
  & {
    display: flex;
    flex-wrap: wrap;
    box-sizing: border-box;
    margin-top: $gutters * -1;
    margin-left: $gutters * -1;
  }

  // Column base styles
  > * {
    box-sizing: border-box;
    padding: $gutters 0 0 $gutters;
  }

  // Column widths
  @if $suffix != '' {
    $suffix: '-' + $suffix;
  }

  @for $i from 1 through 12 {
    > .col-#{$i}#{$suffix} {
      width: #{calc(100% / 12 * $i)};
    }
  }
}

/// Clearfix
/// @description Ensures that a container includes all floated children
/// @example scss
///   .container {
///     @include clearfix;
///   }
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// ==========================================================================
// Text Mixins
// ==========================================================================

/// Text truncation with ellipsis
/// @description Truncates text with an ellipsis if it exceeds one line
/// @example scss
///   .truncated-text {
///     @include truncate;
///   }
@mixin truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// ==========================================================================
// Icon Mixins
// ==========================================================================

/// Icon styling
/// @description Adds an icon using Font Awesome with proper font smoothing
/// @param {string} $content [false] - Icon content (Font Awesome unicode)
/// @param {string} $category [regular] - Icon category (regular, solid, brands)
/// @param {string} $where [before] - Icon position (before, after)
@mixin icon($content: false, $category: regular, $where: before) {
  text-decoration: none;

  &:#{$where} {
    @include vendor.vendor('font-smoothing', 'antialiased');
    display: inline-block;
    font-style: normal;
    font-variant: normal;
    text-rendering: auto;
    line-height: 1;
    text-transform: none !important;

    @if $content {
      content: $content;
    }

    @if ($category == brands) {
      font-family: 'Font Awesome 5 Brands';
    } @else if ($category == solid) {
      font-family: 'Font Awesome 5 Free';
      font-weight: 900;
    } @else {
      font-family: 'Font Awesome 5 Free';
      font-weight: 400;
    }
  }
}

// ==========================================================================
// Button Mixins
// ==========================================================================

/// Button Base
/// @description Styles a basic button with standard properties
/// @example scss
///   .button {
///     @include button-base;
///   }
@mixin button-base {
  display: inline-block;
  padding: fn.spacing('small') fn.spacing('medium');
  border: none;
  border-radius: fn.layout('border-radius');
  font-family: fn.font-family('primary');
  font-weight: fn.font-weight('bold');
  text-decoration: none;
  cursor: pointer;
  transition: all fn.duration('standard') ease-in-out;
}

/// Hide scrollbar
/// @description Hides scrollbars on a container
@mixin hide-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
  &::-webkit-scrollbar {
    display: none;
  }
}
