// ==========================================================================
// Skills Component
// ==========================================================================
//
// This file contains styles for the interactive skills bubbles component.
// It creates an animated display of skills using floating, interactive bubbles.
//
// Usage:
// <div class="skills-container">
//   <div class="skill">
//     <span class="skill-name">Skill Name</span>
//   </div>
// </div>

@use '../abstracts/variables' as vars;
@use '../abstracts/functions' as fn;
@use '../abstracts/colors' as c;
@use '../abstracts/mixins' as mx;
@use '../abstracts/breakpoints' as bp;
@use '../vendor/vendor' as vendor;
@use 'sass:map';
@use 'sass:color';

// ==========================================================================
// Skills Container
// ==========================================================================

.skills-wrapper {
  display: flex;
  width: 100%;
  gap: fn.spacing('medium');
  position: relative;

  @include bp.breakpoint('<=medium') {
    flex-direction: column;
  }
}

.skills-section {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: auto;

  &.software {
    flex: 3;
    
    .skills-section-title {
      background: linear-gradient(to right, c.alpha('accent-alt', 0), c.alpha('secondary', 0.2), c.alpha('accent-alt', 0));
      position: relative;
    }
  }

  &.mechanical {
    flex: 2;
    
    .skills-section-title {
      background: linear-gradient(to right, c.alpha('accent-alt', 0), c.alpha('secondary', 0.2), c.alpha('accent-alt', 0));
    }
  }

  .skills-section-title {
    text-align: center;
    color: c.color('accent-alt');
    font-size: fn.font-size('large');
    margin: 0 0 fn.spacing('small') 0;
    position: relative;
    display: inline-block;
    align-self: center;
    padding: fn.spacing('xsmall') fn.spacing('small') * 1.5;
    border-radius: 30px;
    
    &::after {
      content: '';
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      right: auto;
      bottom: -5px;
      height: 2px;
      width: 60%;
      background: linear-gradient(to right, c.alpha('accent-alt', 0), c.color('accent-alt'), c.alpha('accent-alt', 0));
    }
  }
}

.skills-container {
  flex: 1;
  position: relative;
  padding: fn.spacing('small');
  border: 2px solid c.color('secondary');
  border-radius: map.get(vars.$layout, 'border-radius') * 3;
  background: linear-gradient(135deg, c.alpha('secondary-dark', 0.3) 0%, c.alpha('primary-dark', 0.2) 100%);
  box-shadow: 0 5px 15px c.alpha('background-dark', 0.5);
  transition: all fn.duration('transition') ease;
  min-height: auto;
  height: auto;

  &:hover {
    border-color: c.color('secondary-light');
    transform: translateY(-5px);
    box-shadow: 0 8px 20px c.alpha('background-dark', 0.7);
  }
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 100%;
    background: radial-gradient(circle at top right, c.alpha('secondary-light', 0.1), transparent 70%);
    pointer-events: none;
  }
  
  &.software {
    // border-left: 4px solid c.color('secondary');
    display: flex;
    flex-direction: column;
    gap: fn.spacing('medium');
    height: auto;
    
    @include bp.breakpoint('<=small') {
      padding: fn.spacing('small') * 0.75;
      gap: fn.spacing('small');
    }
  }
  
  &.mechanical {
    // border-right: 4px solid c.color('secondary');
    height: auto;
    
    @include bp.breakpoint('<=medium') {
      min-height: auto;
      margin-bottom: fn.spacing('small');
    }
  }

  .skills-grid {
    display: flex;
    flex-wrap: wrap;
    gap: fn.spacing('small');
    justify-content: center;
    align-items: flex-start;
    padding: fn.spacing('small');
    width: 100%;
    position: relative;
    z-index: 1;
    
    @include bp.breakpoint('<=small') {
      padding: fn.spacing('xsmall');
      gap: fn.spacing('xsmall');
    }
  }
}

// Skills Subcategory Styles
.skills-subcategory {
  position: relative;
  flex: 1;
  display: flex;
  flex-direction: column;
  border: 1px solid c.alpha('secondary', 0.4);
  border-radius: fn.layout('border-radius') * 2;
  padding-top: fn.spacing('large');
  background: c.alpha('primary-dark', 0.2);
  height: auto;
  min-height: auto;
  
  @include bp.breakpoint('<=small') {
    padding-top: fn.spacing('large');
  }
  
  .skills-subcategory-title {
    position: absolute;
    top: fn.spacing('xsmall');
    left: fn.spacing('small');
    font-size: fn.font-size('base');
    color: c.alpha('text', 0.7);
    margin: 0;
    font-weight: fn.font-weight('regular');
    letter-spacing: 1px;
    text-transform: uppercase;
    z-index: 2;
    
    @include bp.breakpoint('<=small') {
      font-size: fn.font-size('small');
    }
    
    &::after {
      content: '';
      position: absolute;
      bottom: -5px;
      left: 0;
      width: 40px;
      height: 2px;
      background: c.alpha('accent', 0.5);
      
      @include bp.breakpoint('<=small') {
        width: 30px;
      }
    }
  }
  
  .skills-grid {
    padding-top: 0;
    flex: 1;
    height: auto;
    min-height: auto;
  }
}

// Skill Tags
.skill {
  opacity: 0;
  transform: translateY(20px);
  transition: all fn.duration('transition') ease-out;

  // Subtle highlight for the highest level skill(s) in a category
  &[data-is-max-level="true"] a {
    box-shadow: 
      0 3px 8px c.alpha('background-dark', 0.3), // Existing shadow
      0 0 5px 1px c.alpha('accent', 0.2); // Subtle glow effect
  }

  &.visible {
    opacity: 1;
    transform: translateY(0);
  }

  a {
    position: relative;
    display: inline-block;
    padding: fn.spacing('xsmall') fn.spacing('small');
    border-radius: 20px;
    text-decoration: none;
    color: c.color('text');
    border: 2px solid c.color('accent');
    font-size: clamp(0.8rem, 2.5vw, fn.font-size('base'));
    font-weight: fn.font-weight('bold');
    background-color: c.alpha('primary-light', 0.5);
    transition: all fn.duration('transition') cubic-bezier(0.175, 0.885, 0.32, 1.275),
      opacity fn.duration('transition') ease;
    overflow: hidden;
    box-shadow: 0 3px 8px c.alpha('background-dark', 0.3);

    .skill-progress {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      width: var(--skill-level);
      background: linear-gradient(90deg, c.color('accent-dark'), c.color('accent'));
      opacity: var(--skill-progress-opacity);
      transition: all fn.duration('transition') ease;
      
      &::after {
        content: '';
        position: absolute;
        right: 0;
        top: 0;
        height: 100%;
        width: 1px;
        background: c.alpha('secondary', 0.5);
      }
    }

    .skill-text {
      position: relative;
      z-index: 1;
    }

    // Hover state (only for devices that support hover)
    @media (hover: hover) {
      &:hover {
        transform: translateY(var(--skill-hover-translate)) scale(var(--skill-hover-scale));
        border-color: c.color('accent-alt');
        box-shadow: 0 8px 16px c.alpha('background-dark', 0.5), 
                    0 0 10px c.alpha('accent-alt', 0.3);

        .skill-progress {
          background: linear-gradient(90deg, c.color('secondary-dark'), c.color('secondary'));
          opacity: var(--skill-progress-hover-opacity);
        }
        
        .skill-text {
          color: c.color('text-light');
        }
      }
    }
    
    // Active state (for tap/click feedback on all devices)
    &:active {
      transform: translateY(1px); // Simulate press
      box-shadow: 0 2px 6px c.alpha('background-dark', 0.4); // Slightly reduced shadow
      
      .skill-progress {
         opacity: 0.9; // Slightly darken progress on press
      }
    }
  }

  // Responsive adjustments
  @include bp.breakpoint('<=medium') {
    a {
      font-size: clamp(0.8rem, 3vw, fn.font-size('large'));
    }
  }

  @include bp.breakpoint('<=small') {
    a {
      font-size: clamp(0.8rem, 4vw, fn.font-size('base'));
    }
  }
}
