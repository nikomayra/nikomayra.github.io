// ==========================================================================
// Vendor Prefix Management
// ==========================================================================
//
// Handles browser compatibility and vendor prefixing.
// This system is actively used for:
// - Cross-browser transitions
// - SVG handling in skills component
// - Form element styling
// - Animation properties
//
// Usage Examples:
// @include vendor.prefix('transform', 'translateX(10px)');
// @include vendor.prefix('appearance', 'none');
// $encoded-svg: vendor.str-replace($svg-string, '"', "'");

@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:map';

// ==========================================================================
// Configuration
// ==========================================================================

/// List of vendor prefixes to apply
/// @type List
$vendor-prefixes: (
  '-webkit-',
  // Chrome, Safari, newer versions of Opera
  '-moz-',
  // Firefox
  '' // Standard (no prefix)
);

/// Properties that require vendor prefixing
/// @type List
$vendor-properties: (
  // Appearance is still experimental
  'appearance',
  // Font smoothing for older Safari
  'font-smoothing',
  // Backdrop filter still needs prefix in some browsers
  'backdrop-filter',
  // Scrollbar styling
  'scrollbar',
  // Some experimental grid features
  'grid-gap',
  'line-clamp'
);

/// CSS values that require vendor prefixing
/// @type List
$vendor-values: (
  // Sticky positioning in older Safari
  'position': 'sticky',
  // Some gradient syntaxes
  'background-image': 'linear-gradient'
);

// ==========================================================================
// String Utilities
// ==========================================================================

/// Remove an item from a list at a specific index
/// @param {List} $list - The list to modify
/// @param {Number} $index - The position to remove
/// @return {List} The modified list
@function remove-nth($list, $index) {
  $result: ();

  @if meta.type-of($index) != number {
    @warn "$index: #{string.quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if math.abs($index) > list.length($list) {
    @warn "List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, list.length($list) + $index + 1, $index);

    @for $i from 1 through list.length($list) {
      @if $i != $index {
        $result: list.append($result, list.nth($list, $i));
      }
    }
  }

  @return $result;
}

/// Replace a substring within a string
/// @param {String} $string - The original string
/// @param {String} $search - The substring to find
/// @param {String} $replace - The replacement string
/// @return {String} The modified string
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

/// Replace a substring in all strings in a list
/// @param {List} $strings - List of strings to process
/// @param {String} $search - The substring to find
/// @param {String} $replace - The replacement string
/// @return {List} The modified list of strings
@function str-replace-all($strings, $search, $replace: '') {
  @each $string in $strings {
    $strings: list.set-nth(
      $strings,
      list.index($strings, $string),
      str-replace($string, $search, $replace)
    );
  }

  @return $strings;
}

// ==========================================================================
// Vendor Prefix Mixins
// ==========================================================================

/// Generate keyframe animations with vendor prefixes
/// @param {String} $name - The name of the keyframe animation
/// @content The keyframe rules
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

/// Apply vendor prefixes to a property and/or its values
/// @param {String} $property - The CSS property to prefix
/// @param {*} $value - The value to use
/// @param {List} $prefixes [()] - Additional prefixes to add
@mixin vendor($property, $value, $prefixes: ()) {
  // Only prefix if property needs it
  @if list.index($vendor-properties, $property) or
    (
      map.has-key($vendor-values, $property) and
        list.index(map-get($vendor-values, $property), $value)
    )
  {
    // Apply all vendor prefixes from the list
    @each $prefix in $vendor-prefixes {
      #{$prefix}#{$property}: $value;
    }
  } @else {
    // Standard property only
    #{$property}: $value;
  }
}
