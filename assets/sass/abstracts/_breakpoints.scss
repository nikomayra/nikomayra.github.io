// ==========================================================================
// Breakpoint System
// ==========================================================================
//
// This file contains the breakpoint system for responsive design.
// It uses a mobile-first approach with min-width breakpoints.
//
// Usage:
// @include bp.breakpoint("<=medium") { ... }
// @include bp.breakpoint(">=large") { ... }
// @include bp.breakpoint(">small", "<large") { ... }

@use "sass:string";
@use "sass:map";
@use "sass:list";
@use "functions" as fn;

/// Breakpoint list
/// @type Map
$breakpoints: (
  // Mobile breakpoints
  "xsmall": 320px,
  "small": 576px,
  "medium": 768px,

  // Tablet/Desktop breakpoints
  "large": 992px,
  "xlarge": 1200px,
  // "xxlarge": 1400px,
  // // Special cases
  // "short": "(max-height: 896px)",
  // "xshort": "(max-height: 736px)",
  // "xxshort": "(max-height: 480px)"
);

/// Breakpoint operation list
/// @type Map
$breakpoint-ops: (
  ">": "min-width",
  ">=": "min-width",
  "=": "max-width",
  "<=": "max-width",
  "<": "max-width",
);

/// Processes a breakpoint value
/// @param {string} $str - Breakpoint string to process
/// @return {number} Processed value in pixels
@function process-bp($str) {
  @if map.has-key($breakpoints, $str) {
    $value: map.get($breakpoints, $str);
    @if meta.type-of($value) == "string" {
      @return $value;
    }
    @return $value * 1px;
  }
  @return $str;
}

/// Creates a media query string
/// @param {string} $op - Operation (>, >=, =, <=, <)
/// @param {string} $bp - Breakpoint name or value
/// @return {string} Media query string
@function create-media-query($op, $bp) {
  $processed-bp: process-bp($bp);
  @if string.index($processed-bp, "max-height") {
    @return $processed-bp;
  }
  @return "(#{map.get($breakpoint-ops, $op)}: #{$processed-bp})";
}

/// Breakpoint mixin
/// @param {string} $from [null] - Lower bound breakpoint
/// @param {string} $until [null] - Upper bound breakpoint
@mixin breakpoint($from: null, $until: null) {
  @if $from and $until {
    @media #{create-media-query(">", $from)} and #{create-media-query("<", $until)} {
      @content;
    }
  } @else if $from {
    @if string.index($from, ">") or string.index($from, ">=") or string.index($from, "<") or string.index($from, "<=") {
      $op: string.slice($from, 1, string.index($from, string.slice($from, -1)) - 1);
      $bp: string.slice($from, string.index($from, string.slice($from, -1)));
      @media #{create-media-query($op, $bp)} {
        @content;
      }
    } @else {
      @media #{create-media-query(">=", $from)} {
        @content;
      }
    }
  } @else if $until {
    @media #{create-media-query("<", $until)} {
      @content;
    }
  } @else {
    @content;
  }
}
