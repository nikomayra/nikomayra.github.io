// ==========================================================================
// Breakpoint System
// ==========================================================================
//
// This file contains the breakpoint system for responsive design.
// It uses a mobile-first approach with min-width breakpoints.
//
// Usage:
// @include bp.breakpoint("<=medium") { ... }
// @include bp.breakpoint(">=large") { ... }
// @include bp.breakpoint(">small", "<large") { ... }

@use "sass:string";
@use "sass:map";
@use "sass:list";
@use "functions" as fn;

/// Breakpoint list
/// @type Map
$breakpoints: (
  // Mobile breakpoints
  "xxsmall": "(max-width: 320px)",
  "xsmall": "(max-width: 480px)",
  "small": "(max-width: 736px)",
  
  // Tablet breakpoints
  "medium": "(max-width: 980px)",
  
  // Desktop breakpoints
  "large": "(max-width: 1280px)",
  "xlarge": "(max-width: 1680px)",
  
  // Special cases
  "short": "(max-height: 896px)",
  "xshort": "(max-height: 736px)",
  "xxshort": "(max-height: 480px)"
);

/// Breakpoint operation list
/// @type Map
$breakpoint-ops: (
  ">": "min-width",
  ">=": "min-width",
  "=": "max-width",
  "<=": "max-width",
  "<": "max-width"
);

/// Processes a breakpoint value
/// @param {string} $str - Breakpoint string to process
/// @return {number} Processed value in pixels
@function breakpoint-parse($str) {
  $op: "";
  $bp: $str;
  $index: string.index($str, " ");

  // Extract operation and breakpoint if present
  @if $index {
    $op: string.slice($str, 1, $index - 1);
    $bp: string.slice($str, $index + 1);
  }

  // Return processed value
  @return if(
    map.has-key($breakpoints, $bp),
    map.get($breakpoints, $bp),
    $bp
  );
}

/// Creates a media query based on breakpoint(s)
/// @param {string...} $points - Breakpoint string(s)
/// @content - Styles to include within the media query
@mixin breakpoint($point...) {
  $query: "";
  $ops: "";
  $media: "";
  $first: true;

  // Process each breakpoint
  @each $point in $point {
    $prefix: if($first, "", " and ");
    $first: false;
    $op: "";
    $str: "";

    // Handle operation prefixes
    @if string.index($point, ">") {
      $op: if(string.index($point, "="), ">=", ">");
      $str: string.slice($point, string.length($op) + 1);
    } @else if string.index($point, "<") {
      $op: if(string.index($point, "="), "<=", "<");
      $str: string.slice($point, string.length($op) + 1);
    } @else {
      $op: "=";
      $str: $point;
    }

    // Build media query
    $bp: breakpoint-parse(fn.trim($str));
    $mediaOp: map.get($breakpoint-ops, $op);
    $query: $query + $prefix + "(" + $mediaOp + ": " + $bp + ")";
  }

  // Output media query with content
  @media #{$query} {
    @content;
  }
}
