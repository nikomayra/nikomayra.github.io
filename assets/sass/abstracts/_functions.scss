// ==========================================================================
// Function Library
// ==========================================================================
//
// Core utility functions used throughout the application.
// Functions are organized by type and purpose.
//
// Categories:
// - Simple Getters: Direct map access functions
// - Typography: Font-related functions
// - Layout: Spacing and structural functions
// - Component: Component-specific value retrieval
// - Unit Conversion: px to rem/em conversion
// - SVG: SVG string manipulation
//
// Usage Examples:
// font-size: fn.font-size('base');
// color: fn.color('primary');
// spacing: fn.spacing('medium');

@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'variables' as vars;
@use 'colors' as c;

// ==========================================================================
// Simple Getters
// ==========================================================================

// /// Get a size value
// /// @param {String} $key - Key to get from the size map
// /// @return {*} Found value
// @function size($key) {
//   @return map.get(vars.$sizes, $key);
// }

/// Get a spacing value
/// @param {String} $key - Key to get from the spacing map
/// @return {*} Found value
@function spacing($key) {
  @return map.get(vars.$spacing, $key);
}

/// Get a font-family
/// @param {String} $key - Key to get from the font-family map
/// @return {*} Found value
@function font-family($key) {
  @return map.get(vars.$font-families, $key);
}

/// Get a font-weight
/// @param {String} $key - Key to get from the font-weight map
/// @return {*} Found value
@function font-weight($key) {
  @return map.get(vars.$font-weights, $key);
}

/// Get a font-size
/// @param {String} $key - Key to get from the font-size map
/// @return {*} Found value
@function font-size($key) {
  @return map.get(vars.$font-sizes, $key);
}

/// Get a z-index value
/// @param {String} $key - Key to get from the z-index map
/// @return {*} Found value
@function z-index($key) {
  @return map.get(vars.$z-index, $key);
}

/// Get a duration value
/// @param {String} $key - Key to get from the duration map
/// @return {*} Found value
@function duration($key) {
  @return map.get(vars.$durations, $key);
}

// ==========================================================================
// Typography Functions
// ==========================================================================

/// Get a typography value
/// @param {string} $type - Type of typography value (family, weight, size)
/// @param {string} $key - Specific key to retrieve
/// @return {*} The typography value
@function typography($type, $key) {
  @return map.get(map.get(vars.$typography, $type), $key);
}

/// Get a font family
/// @param {String} $key - Font family key
/// @return {List} Font family stack
@function font-family($key) {
  @return map.get($typography, 'family', $key);
}

/// Get a font weight
/// @param {string} $weight - Weight name
/// @return {number} Font weight value
@function font-weight($weight) {
  @return map.get(vars.$font-weights, $weight);
}

/// Get a font size
/// @param {string} $size - Size name
/// @return {string} Font size value
@function font-size($size) {
  @return map.get(vars.$font-sizes, $size);
}

// ==========================================================================
// Layout Functions
// ==========================================================================

/// Layout Function
/// @param {String} $key - Layout measurement key
/// @return {Number} Layout value
@function layout($key) {
  @return map.get($layout, $key);
}

/// Get a spacing value
/// @param {string} $key - Spacing key
/// @return {*} Spacing value
@function spacing($key) {
  @return map.get(vars.$spacing, $key);
}

// ==========================================================================
// Component Functions
// ==========================================================================

/// Get a component variable
/// @param {string} $component - Component name
/// @param {string} $key - Variable key
/// @return {*} Component value
@function component($component, $key) {
  @return map.get(map.get(vars.$component-vars, $component), $key);
}

// ==========================================================================
// Z-index Functions
// ==========================================================================

/// Get a z-index value
/// @param {string} $key - Z-index key
/// @return {number} Z-index value
@function z($key) {
  @return map.get(vars.$z-index, $key);
}

// ==========================================================================
// Duration Functions
// ==========================================================================

/// Get a duration value
/// @param {string} $key - Duration key
/// @return {string} Duration value
@function duration($key) {
  @return map.get(vars.$durations, $key);
}

// ==========================================================================
// Unit Conversion Functions
// ==========================================================================

/// Remove units from a number
/// @param {number} $value - Number to strip units from
/// @return {number} Number without units
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

/// Convert a pixel value to rem
/// @param {Number} $px - Pixel value to convert
/// @return {Number} Converted rem value
@function px-to-rem($px) {
  @return math.div($px, vars.$base-font-size) * 1rem;
}

/// Convert px to em
/// @param {number} $px - Pixel value to convert
/// @param {number} $base [16px] - Base font size
/// @return {string} Em value
@function em($px, $base: vars.$base-font-size) {
  @if meta.type-of($px) == 'number' {
    @return math.div($px, $base) * 1em;
  }
  @return $px;
}

// ==========================================================================
// SVG Functions
// ==========================================================================

/// Get an SVG URL
/// @param {string} $svg - SVG string
/// @return {string} SVG URL
@function svg-url($svg) {
  $svg: vendor.str-replace($svg, '"', "'");
  $svg: vendor.str-replace($svg, '%', '%25');
  $svg: vendor.str-replace($svg, '<', '%3C');
  $svg: vendor.str-replace($svg, '>', '%3E');
  $svg: vendor.str-replace($svg, '&', '%26');
  $svg: vendor.str-replace($svg, '#', '%23');
  $svg: vendor.str-replace($svg, '{', '%7B');
  $svg: vendor.str-replace($svg, '}', '%7D');
  $svg: vendor.str-replace($svg, '|', '%7C');
  $svg: vendor.str-replace($svg, '^', '%5E');
  $svg: vendor.str-replace($svg, '`', '%60');
  $svg: vendor.str-replace($svg, '@', '%40');
  $svg: vendor.str-replace($svg, ';', '%3B');

  @return url('data:image/svg+xml;charset=utf8,#{$svg}');
}
