// ==========================================================================
// Vendor Prefix Management System
// ==========================================================================
//
// This file provides a comprehensive system for managing vendor prefixes and
// browser-specific CSS properties. It handles:
// 1. Automatic vendor prefixing for properties and values
// 2. String manipulation utilities for CSS value processing
// 3. List management for vendor-specific features
//
// Usage:
// @use "vendor";
// @include vendor.vendor("transform", "scale(2)");
// @include vendor.vendor("display", "flex");

@use "sass:list";
@use "sass:math";
@use "sass:meta";
@use "sass:string";

// ==========================================================================
// Configuration
// ==========================================================================

/// List of vendor prefixes to apply
/// @type List
$vendor-prefixes: (
  "-moz-",     // Firefox
  "-webkit-",  // Chrome, Safari, newer versions of Opera
  "-ms-",      // Internet Explorer
  ""           // Standard (no prefix)
);

/// Properties that require vendor prefixing
/// @type List
/// Data sourced from caniuse.com and MDN
$vendor-properties: (
  // Animation
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",

  // Appearance
  "appearance",

  // Backdrop filter
  "backdrop-filter",

  // Background
  "background-clip",
  "background-origin",
  "background-size",

  // Box model
  "box-sizing",
  "clip-path",

  // Filter effects
  "filter",

  // Flexbox
  "align-content",
  "align-items",
  "align-self",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "justify-content",
  "order",

  // Grid
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-gap",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-gap",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",

  // Transform
  "transform",
  "transform-origin",
  "transform-style",
  "backface-visibility",
  "perspective",
  "perspective-origin",

  // Transition
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",

  // Other
  "font-smoothing",
  "user-select",
  "touch-action"
);

/// CSS values that require vendor prefixing
/// @type List
$vendor-values: (
  // Display modes
  "flex",
  "inline-flex",
  "grid",
  "inline-grid",

  // Image handling
  "image-set",

  // Intrinsic sizing
  "max-content",
  "min-content",
  "fit-content",
  "fill",
  "fill-available",
  "stretch",

  // Position
  "sticky",

  // Transform
  "transform",

  // Cursors
  "zoom-in",
  "zoom-out"
);

// ==========================================================================
// String Utilities
// ==========================================================================

/// Remove an item from a list at a specific index
/// @param {List} $list - The list to modify
/// @param {Number} $index - The position to remove
/// @return {List} The modified list
@function remove-nth($list, $index) {
  $result: ();

  @if meta.type-of($index) != number {
    @warn "$index: #{string.quote($index)} is not a number for `remove-nth`.";
  } @else if $index == 0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if math.abs($index) > list.length($list) {
    @warn "List index is #{$index} but list is only #{list.length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, list.length($list) + $index + 1, $index);

    @for $i from 1 through list.length($list) {
      @if $i != $index {
        $result: list.append($result, list.nth($list, $i));
      }
    }
  }

  @return $result;
}

/// Replace a substring within a string
/// @param {String} $string - The original string
/// @param {String} $search - The substring to find
/// @param {String} $replace - The replacement string
/// @return {String} The modified string
@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

/// Replace a substring in all strings in a list
/// @param {List} $strings - List of strings to process
/// @param {String} $search - The substring to find
/// @param {String} $replace - The replacement string
/// @return {List} The modified list of strings
@function str-replace-all($strings, $search, $replace: "") {
  @each $string in $strings {
    $strings: list.set-nth($strings, list.index($strings, $string), str-replace($string, $search, $replace));
  }

  @return $strings;
}

// ==========================================================================
// Vendor Prefix Mixins
// ==========================================================================

/// Generate keyframe animations with vendor prefixes
/// @param {String} $name - The name of the keyframe animation
/// @content The keyframe rules
@mixin keyframes($name) {
  @-moz-keyframes #{$name} { @content; }
  @-webkit-keyframes #{$name} { @content; }
  @-ms-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}

/// Apply vendor prefixes to a property and/or its values
/// @param {String} $property - The CSS property to prefix
/// @param {String|List} $value - The value(s) to apply
@mixin vendor($property, $value) {
  // Check if property needs vendor prefixes
  $expandProperty: list.index($vendor-properties, $property);

  // Check if value needs vendor prefixes
  $expandValue: false;
  @each $x in $value {
    @each $y in $vendor-values {
      @if $y == string.slice($x, 1, string.length($y)) {
        $value: list.set-nth($value, list.index($value, $x), "-prefix-" + $x);
        $expandValue: true;
      }
    }
  }

  // Apply prefixes based on what needs expansion
  @if $expandProperty {
    @each $vendor in $vendor-prefixes {
      #{$vendor}#{$property}: #{str-replace-all($value, "-prefix-", $vendor)};
    }
  } @else if $expandValue {
    @each $vendor in $vendor-prefixes {
      #{$property}: #{str-replace-all($value, "-prefix-", $vendor)};
    }
  } @else {
    #{$property}: #{$value};
  }
}
